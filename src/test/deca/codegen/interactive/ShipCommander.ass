	TSTO #15
	BOV stack_overflow_error
	ADDSP #7
; start main program
	LOAD #null, R0
	STORE R0, 1(GB)
	LOAD code.Object.equals, R0
	STORE R0, 2(GB)
; Code de la table des méthodes de Ship
	LEA 1(GB), R0
	STORE R0, 3(GB)
	LOAD code.Object.equals, R0
	STORE R0, 4(GB)
	LOAD code.Ship.position, R0
	STORE R0, 5(GB)
; Main program
; Beginning declaration of main variables:
	NEW #2, R2
	BOV stack_overflow_error
	LEA 3(GB), R0
	STORE R0, 0(R2)
	PUSH R2
	BSR init.Ship
	POP R2
	STORE R2, 6(GB)
; Ship ship is defined and stored in 6(GB)
; int choice is defined and stored in 7(GB)
; Beginning of main instructions:
	WSTR "1 => Start commanding the ship"
	WNL
	WSTR "2 => Quit"
	WNL
	RINT
	PUSH R1
	POP R2
	STORE R2, 7(GB)
	PUSH R2
	SUBSP #1
while_45:
	LOAD 7(GB), R2
	PUSH R2
	LOAD #1, R2
	PUSH R2
	POP R3
	POP R2
	CMP R3, R2
	SEQ R2
	PUSH R2
	POP R2
	CMP #0, R2
	BEQ endWhile_45
	WSTR "1 => Go left"
	WNL
	WSTR "2 => Go to the Center"
	WNL
	WSTR "3 => Go to the right"
	WNL
	RINT
	PUSH R1
	LOAD 6(GB), R2
	PUSH R2
	POP R2
	CMP #null, R2
	BEQ dereferencement.null
	LEA 1(R2), R2
	PUSH R2
	POP R3
	POP R2
	STORE R2, 0(R3)
	PUSH R2
	SUBSP #1
	LOAD 6(GB), R2
	PUSH R2
	LOAD 0(SP), R2
	CMP #null, R2
	BEQ dereferencement.null
	BSR code.Ship.position
	SUBSP #1
	WSTR "1 => Continue the game"
	WNL
	RINT
	PUSH R1
	POP R2
	STORE R2, 7(GB)
	PUSH R2
	SUBSP #1
	BRA while_45
endWhile_45:
	HALT
; End main program
; Method codes of classes
; -------Object-------
init.Object:
	RTS
code.Object.equals:
	TSTO #2
	BOV stack_overflow_error
	PUSH R2
	PUSH R3
	LOAD -2(LB), R2
	LOAD -3(LB), R3
	CMP R3, R2
	SEQ R0
; Restauration des registres
	POP R3
	POP R2
	RTS
; -------Ship-------
init.Ship:
	LOAD -2(LB), R1
; Initialisation de l'attribut currentPosition
	PUSH R1
	LOAD #2, R2
	PUSH R2
	POP R2
	STORE R2, 1(SP)
	LOAD 1(SP), R2
	POP R1
	STORE R2, 1(R1)
	RTS
code.Ship.position:
	TSTO #2
; Sauvegarde des registres
	PUSH R2
	PUSH R3
	BOV stack_overflow_error
; Corps de la méthode
	LOAD -2(LB), R2
	PUSH R2
	POP R2
	CMP #null, R2
	BEQ dereferencement.null
	LOAD 1(R2), R2
	PUSH R2
	LOAD #1, R2
	PUSH R2
	POP R3
	POP R2
	CMP R3, R2
	SEQ R2
	PUSH R2
	POP R2
	CMP #0, R2
	BEQ endLabel_1
	WSTR "=====        "
	WNL
endLabel_1:
	LOAD -2(LB), R2
	PUSH R2
	POP R2
	CMP #null, R2
	BEQ dereferencement.null
	LOAD 1(R2), R2
	PUSH R2
	LOAD #2, R2
	PUSH R2
	POP R3
	POP R2
	CMP R3, R2
	SEQ R2
	PUSH R2
	POP R2
	CMP #0, R2
	BEQ endLabel_2
	WSTR "    =====    "
	WNL
endLabel_2:
	LOAD -2(LB), R2
	PUSH R2
	POP R2
	CMP #null, R2
	BEQ dereferencement.null
	LOAD 1(R2), R2
	PUSH R2
	LOAD #3, R2
	PUSH R2
	POP R3
	POP R2
	CMP R3, R2
	SEQ R2
	PUSH R2
	POP R2
	CMP #0, R2
	BEQ endLabel_3
	WSTR "hello"
	WNL
	WSTR "               ====="
	WNL
endLabel_3:
; Restauration des registres
	POP R3
	POP R2
	RTS
; Messages d'erreurs
overflow_error:
	WSTR "Error: Overflow during arithmetic operation"
	WNL
	ERROR
stack_overflow_error:
	WSTR "Error: Stack Overflow"
	WNL
	ERROR
dereferencement.null:
	WSTR "Error : dereferencement de null"
	WNL
	ERROR
divide_by_zero:
	WSTR "Error : you divided by zero"
	WNL
	ERROR
; end main program
