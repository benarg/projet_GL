DEBUG fr.ensimag.deca.tree.Program.verifyProgram(Program.java:48) - verify program: start
DEBUG fr.ensimag.deca.tree.ListDeclClass.verifyListClass(ListDeclClass.java:46) - verify listClass: start
DEBUG fr.ensimag.deca.tree.ListDeclClass.verifyListClass(ListDeclClass.java:52) - verify listClass: end
DEBUG fr.ensimag.deca.tree.Main.verifyMain(Main.java:35) - verify Main: start
DEBUG fr.ensimag.deca.tree.Main.verifyMain(Main.java:50) - verify Main: end
`> [10, 0] Program
   +> [10, 0] ListDeclClass [List with 0 elements]
   `> [10, 0] Main
      +> [11, 4] ListDeclVar [List with 3 elements]
      |  []> [11, 10] DeclVar
      |  ||  +> [11, 4] Identifier (float)
      |  ||  |  definition: type (builtin), type=float
      |  ||  +> [11, 10] Identifier (f1)
      |  ||  |  definition: variable defined at [11, 10], type=float
      |  ||  `> [11, 10] Initialization
      |  ||     `> [11, 15] Float (1.1)
      |  ||        type: float
      |  []> [12, 10] DeclVar
      |  ||  +> [12, 4] Identifier (float)
      |  ||  |  definition: type (builtin), type=float
      |  ||  +> [12, 10] Identifier (f2)
      |  ||  |  definition: variable defined at [12, 10], type=float
      |  ||  `> [12, 10] Initialization
      |  ||     `> [12, 15] Float (1.3)
      |  ||        type: float
      |  []> [13, 10] DeclVar
      |      +> [13, 4] Identifier (float)
      |      |  definition: type (builtin), type=float
      |      +> [13, 10] Identifier (f3)
      |      |  definition: variable defined at [13, 10], type=float
      |      `> [13, 10] Initialization
      |         `> [13, 15] Divide
      |            type: float
      |            +> [13, 15] Multiply
      |            |  type: float
      |            |  +> [13, 15] Identifier (f1)
      |            |  |  definition: variable defined at [11, 10], type=float
      |            |  `> [13, 20] Identifier (f2)
      |            |     definition: variable defined at [12, 10], type=float
      |            `> [13, 25] Float (2.0)
      |               type: float
      `> [15, 4] ListInst [List with 1 elements]
         []> [15, 4] Println
             `> [15, 12] ListExpr [List with 1 elements]
                []> [15, 12] StringLiteral (This is the result for f3)
                    type: string
